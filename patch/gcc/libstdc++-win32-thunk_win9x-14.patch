diff --git a/libstdc++-v3/config/io/basic_file_stdio.cc b/libstdc++-v3/config/io/basic_file_stdio.cc
index 9b529490f08..d576662ff14 100644
--- a/libstdc++-v3/config/io/basic_file_stdio.cc
+++ b/libstdc++-v3/config/io/basic_file_stdio.cc
@@ -71,6 +71,10 @@
 # include <io.h>     // For _get_osfhandle
 #endif
 
+#ifdef _WIN32
+#include <win32-thunk.h>
+#endif
+
 namespace
 {
   // Map ios_base::openmode flags to a string for use in fopen().
@@ -289,7 +293,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION
 	  }
 	while (__c_mode[++__i]);
 
-	if ((_M_cfile = _wfopen(__name, __wc_mode)))
+	if ((_M_cfile = Win32Thunk::_wfopen(__name, __wc_mode)))
 	  {
 	    _M_cfile_created = true;
 	    __ret = this;
diff --git a/libstdc++-v3/src/c++17/fs_ops.cc b/libstdc++-v3/src/c++17/fs_ops.cc
index 07bc2a0fa88..e07b0645d0d 100644
--- a/libstdc++-v3/src/c++17/fs_ops.cc
+++ b/libstdc++-v3/src/c++17/fs_ops.cc
@@ -56,6 +56,7 @@
 #ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS
 # define WIN32_LEAN_AND_MEAN
 # include <windows.h>
+# include <win32-thunk.h>
 #endif
 
 #define _GLIBCXX_BEGIN_NAMESPACE_FILESYSTEM namespace filesystem {
@@ -113,7 +114,7 @@ fs::absolute(const path& p, error_code& ec)
   do
     {
       buf.__resize_and_overwrite(len, [&s, &len](wchar_t* p, unsigned n) {
-	len = GetFullPathNameW(s.data(), n, p, nullptr);
+	len = Win32Thunk::GetFullPathNameW(s.data(), n, p, nullptr);
 	return len > n ? 0 : len;
       });
     }
@@ -687,7 +688,7 @@ fs::create_hard_link(const path& to, const path& new_hard_link,
   else
     ec.clear();
 #elif defined _GLIBCXX_FILESYSTEM_IS_WINDOWS
-  if (CreateHardLinkW(new_hard_link.c_str(), to.c_str(), NULL))
+  if (Win32Thunk::CreateHardLinkW(new_hard_link.c_str(), to.c_str(), NULL))
     ec.clear();
   else
     ec = __last_system_error();
@@ -860,7 +861,7 @@ fs::equivalent(const path& p1, const path& p2, error_code& ec) noexcept
 
       struct auto_handle {
 	explicit auto_handle(const path& p_)
-	: handle(CreateFileW(p_.c_str(), 0,
+	: handle(Win32Thunk::CreateFileW(p_.c_str(), 0,
 	      FILE_SHARE_DELETE | FILE_SHARE_READ | FILE_SHARE_WRITE,
 	      0, OPEN_EXISTING, FILE_FLAG_BACKUP_SEMANTICS, 0))
 	{ }
@@ -1262,8 +1263,8 @@ fs::remove(const path& p, error_code& ec) noexcept
   auto st = symlink_status(p, ec);
   if (exists(st))
     {
-      if ((is_directory(p, ec) && RemoveDirectoryW(p.c_str()))
-	  || DeleteFileW(p.c_str()))
+      if ((is_directory(p, ec) && Win32Thunk::RemoveDirectoryW(p.c_str()))
+	  || Win32Thunk::DeleteFileW(p.c_str()))
 	{
 	  ec.clear();
 	  return true;
diff --git a/libstdc++-v3/src/c++23/print.cc b/libstdc++-v3/src/c++23/print.cc
index 8ba71405967..014a066a353 100644
--- a/libstdc++-v3/src/c++23/print.cc
+++ b/libstdc++-v3/src/c++23/print.cc
@@ -38,6 +38,7 @@
 # include <io.h>      // _get_osfhandle, _open_osfhandle, _write
 # include <fcntl.h>   // _O_APPEND
 # include <windows.h> // GetLastError, WriteConsoleW
+# include <win32-thunk.h>
 #elifdef _GLIBCXX_HAVE_UNISTD_H
 # include <stdio.h>   // fileno
 # include <unistd.h>  // isatty
@@ -336,7 +337,7 @@ namespace
       }
 
     unsigned long nchars = 0;
-    WriteConsoleW(term, wstr.data(), wstr.size(), &nchars, nullptr);
+    Win32Thunk::WriteConsoleW(term, wstr.data(), wstr.size(), &nchars, nullptr);
     if (nchars != wstr.size())
       return {(int)GetLastError(), system_category()};
 #elifdef _GLIBCXX_HAVE_UNISTD_H
diff --git a/libstdc++-v3/src/filesystem/dir-common.h b/libstdc++-v3/src/filesystem/dir-common.h
index 95eaf98ed08..bf75feeb029 100644
--- a/libstdc++-v3/src/filesystem/dir-common.h
+++ b/libstdc++-v3/src/filesystem/dir-common.h
@@ -30,6 +30,7 @@
 #include <errno.h>
 #if _GLIBCXX_FILESYSTEM_IS_WINDOWS
 #include <wchar.h>  // wcscmp
+#include <win32-thunk.h>
 #endif
 #ifdef _GLIBCXX_HAVE_DIRENT_H
 # ifdef _GLIBCXX_HAVE_SYS_TYPES_H
@@ -54,9 +55,9 @@ namespace __gnu_posix
 using char_type = wchar_t;
 using DIR = ::_WDIR;
 using dirent = _wdirent;
-inline DIR* opendir(const wchar_t* path) { return ::_wopendir(path); }
-inline dirent* readdir(DIR* dir) { return ::_wreaddir(dir); }
-inline int closedir(DIR* dir) { return ::_wclosedir(dir); }
+inline DIR* opendir(const wchar_t* path) { return Win32Thunk::_wopendir(path); }
+inline dirent* readdir(DIR* dir) { return Win32Thunk::_wreaddir(dir); }
+inline int closedir(DIR* dir) { return Win32Thunk::_wclosedir(dir); }
 #elif defined _GLIBCXX_HAVE_DIRENT_H
 using char_type = char;
 using DIR = ::DIR;
diff --git a/libstdc++-v3/src/filesystem/ops-common.h b/libstdc++-v3/src/filesystem/ops-common.h
index d917fddbeb1..c3215be1698 100644
--- a/libstdc++-v3/src/filesystem/ops-common.h
+++ b/libstdc++-v3/src/filesystem/ops-common.h
@@ -44,6 +44,7 @@
 
 #ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS
 # include <wchar.h>
+# include <win32-thunk.h>
 #endif
 
 #ifdef NEED_DO_COPY_FILE
@@ -110,10 +111,10 @@ namespace __gnu_posix
 #ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS
 // Adapt the Windows _wxxx functions to look like POSIX xxx, but for wchar_t*.
   inline int open(const wchar_t* path, int flags)
-  { return ::_wopen(path, flags); }
+  { return Win32Thunk::_wopen(path, flags); }
 
   inline int open(const wchar_t* path, int flags, int mode)
-  { return ::_wopen(path, flags, mode); }
+  { return Win32Thunk::_wopen(path, flags, mode); }
 
   inline int close(int fd)
   { return ::_close(fd); }
@@ -121,7 +122,7 @@ namespace __gnu_posix
   using stat_type = struct ::__stat64;
 
   inline int stat(const wchar_t* path, stat_type* buffer)
-  { return ::_wstat64(path, buffer); }
+  { return Win32Thunk::_wstat64(path, buffer); }
 
   inline int lstat(const wchar_t* path, stat_type* buffer)
   {
@@ -132,31 +133,31 @@ namespace __gnu_posix
   using ::mode_t;
 
   inline int chmod(const wchar_t* path, mode_t mode)
-  { return ::_wchmod(path, mode); }
+  { return Win32Thunk::_wchmod(path, mode); }
 #define _GLIBCXX_USE_CHMOD 1
 
   inline int mkdir(const wchar_t* path, mode_t)
-  { return ::_wmkdir(path); }
+  { return Win32Thunk::_wmkdir(path); }
 #define _GLIBCXX_USE_MKDIR 1
 
   inline wchar_t* getcwd(wchar_t* buf, size_t size)
-  { return ::_wgetcwd(buf, size > (size_t)INT_MAX ? INT_MAX : (int)size); }
+  { return Win32Thunk::_wgetcwd(buf, size > (size_t)INT_MAX ? INT_MAX : (int)size); }
 #define _GLIBCXX_USE_GETCWD 1
 
   inline int chdir(const wchar_t* path)
-  { return ::_wchdir(path); }
+  { return Win32Thunk::_wchdir(path); }
 #define _GLIBCXX_USE_CHDIR 1
 
 #if !_GLIBCXX_USE_UTIMENSAT && _GLIBCXX_HAVE_UTIME_H
   using utimbuf = _utimbuf;
 
   inline int utime(const wchar_t* path, utimbuf* times)
-  { return ::_wutime(path, times); }
+  { return Win32Thunk::_wutime(path, times); }
 #endif
 
   inline int rename(const wchar_t* oldname, const wchar_t* newname)
   {
-    if (MoveFileExW(oldname, newname,
+    if (Win32Thunk::MoveFileExW(oldname, newname,
 		    MOVEFILE_REPLACE_EXISTING | MOVEFILE_COPY_ALLOWED))
       return 0;
     if (GetLastError() == ERROR_ACCESS_DENIED)
@@ -169,7 +170,7 @@ namespace __gnu_posix
   using off_t = _off64_t;
   inline int truncate(const wchar_t* path, _off64_t length)
   {
-    const int fd = ::_wopen(path, _O_BINARY|_O_RDWR);
+    const int fd = Win32Thunk::_wopen(path, _O_BINARY|_O_RDWR);
     if (fd == -1)
       return fd;
     const int ret = ::ftruncate64(fd, length);
