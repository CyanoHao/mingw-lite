diff --git a/bfd/bfdio.c b/bfd/bfdio.c
index 7063bcc1ae6..adcf4aa8519 100644
--- a/bfd/bfdio.c
+++ b/bfd/bfdio.c
@@ -122,7 +122,6 @@ _bfd_real_fopen (const char *filename, const char *modes)
   const wchar_t   prefixDOS[] = L"\\\\?\\";
   const wchar_t   prefixUNC[] = L"\\\\?\\UNC\\";
   const wchar_t   prefixNone[] = L"";
-  const size_t    partPathLen = strlen (filename) + 1;
   const wchar_t * prefix;
   size_t          sizeof_prefix;
   bool            strip_network_prefix = false;
@@ -189,11 +188,7 @@ _bfd_real_fopen (const char *filename, const char *modes)
     }
 
 #ifdef __MINGW32__
-#if !HAVE_DECL____LC_CODEPAGE_FUNC
-  /* This prototype was added to locale.h in version 9.0 of MinGW-w64.  */
-  _CRTIMP unsigned int __cdecl ___lc_codepage_func (void);
-#endif
-  const unsigned int cp = ___lc_codepage_func ();
+  const unsigned int cp = CP_ACP;
 #else
   const unsigned int cp = CP_UTF8;
 #endif
@@ -203,13 +198,14 @@ _bfd_real_fopen (const char *filename, const char *modes)
      2) Convert the string: Calling with cbMultiByte set to -1 includes the terminating null.  */
   size_t     partPathWSize = MultiByteToWideChar (cp, 0, filename, -1, NULL, 0);
   wchar_t *  partPath = calloc (partPathWSize, sizeof(wchar_t));
+  size_t     partPathLen = partPathWSize - 1;
   size_t     ix;
 
   MultiByteToWideChar (cp, 0, filename, -1, partPath, partPathWSize);
 
   /* Convert any UNIX style path separators into the DOS i.e. backslash separator.  */
   for (ix = 0; ix < partPathLen; ix++)
-    if (IS_UNIX_DIR_SEPARATOR(filename[ix]))
+    if (IS_UNIX_DIR_SEPARATOR(partPath[ix]))
       partPath[ix] = '\\';
 
   /* Getting the full path from the provided partial path.
