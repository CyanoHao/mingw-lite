diff --git a/gdb/ui-style.c b/gdb/ui-style.c
index be4c7aca046..063e8e73119 100644
--- a/gdb/ui-style.c
+++ b/gdb/ui-style.c
@@ -44,7 +44,8 @@ static const char ansi_regex_text[] =
 
 /* The compiled form of ansi_regex_text.  */
 
-static regex_t ansi_regex;
+static compiled_regex ansi_regex (ansi_regex_text, REG_EXTENDED,
+  _("Error in ANSI terminal escape sequences regex"));
 
 /* This maps bright colors to RGB triples.  The index is the bright
    color index, starting with bright black.  The values come from
@@ -232,7 +233,7 @@ ui_file_style::parse (const char *buf, size_t *n_read)
 {
   regmatch_t subexps[NUM_SUBEXPRESSIONS];
 
-  int match = regexec (&ansi_regex, buf, ARRAY_SIZE (subexps), subexps, 0);
+  int match = ansi_regex.exec (buf, ARRAY_SIZE (subexps), subexps, 0);
   if (match == REG_NOMATCH)
     {
       *n_read = 0;
@@ -399,20 +400,10 @@ skip_ansi_escape (const char *buf, int *n_read)
 {
   regmatch_t subexps[NUM_SUBEXPRESSIONS];
 
-  int match = regexec (&ansi_regex, buf, ARRAY_SIZE (subexps), subexps, 0);
+  int match = ansi_regex.exec (buf, ARRAY_SIZE (subexps), subexps, 0);
   if (match == REG_NOMATCH || buf[subexps[FINAL_SUBEXP].rm_so] != 'm')
     return false;
 
   *n_read = subexps[FINAL_SUBEXP].rm_eo;
   return true;
 }
-
-void _initialize_ui_style ();
-void
-_initialize_ui_style ()
-{
-  int code = regcomp (&ansi_regex, ansi_regex_text, REG_EXTENDED);
-  /* If the regular expression was incorrect, it was a programming
-     error.  */
-  gdb_assert (code == 0);
-}
